
---
title: "Lesson 2 - Functions, Scientific Packages"
author: "Valentine Gilbart"
date : last-modified
format: 
  html: 
    toc: true
    number-sections: true
editor: source
solutions: true
---

```{python}
import os
os.getcwd()
os.listdir('exercise/data') 
```

# Introduction

## Aim of the class

At the end of this class, you will be able to:

- Create simple functions
- Handle some errors
- Ask for input from the user
- Upload, modify and download files into Python 
- Import packages (and use in a simple manner some scientific packages)

# Function

A function stores a piece of code that performs a certain task, and that gets run when called. It takes some data as input (parameters that are required or optional), and returns an output (that can be of any type). 

::: {.callout-tip} 
We already learned how to run a predefined function in the last lesson. 
You need to write its name followed by parenthesis. Parameters are added inside the parenthesis as follow:

```{python}
# round(number, ndigits=None)
x = round(number = 5.76543, ndigits = 2)
print(x)
```

To get more information about a function, use the `help()` function.
:::

We will now learn how to create our own function. 

## Syntax

In python, a function is declared with the keyword `def` followed by its name, and the arguments inside parenthesis. 
The next block of code, corresponding to the content of the function, must be indented. The output is defined by the `return` keyword.

```{python}
def hello(name):
  """Presenting myself."""
  presentation = f"Hello, my name is {name}."
  return presentation
```


```{python}
text = hello(name = "Valentine")
print(text)
```

## Documentation

As you may have noticed, you can also add a description of the function directly after the function definition. It is the message that will be shown when running `help()`. As it can be along text over multiple lines, it is common to put it inside triple quotes ```"""```. 

```{python}
help(hello)
```

## Arguments

You can have several arguments. They can be mandatory or optional. To make them optional, they need to have a default value assigned inside the function definition, like so:

```{python}
def hello(name, french = True):
  """Presenting myself."""
  if french:
    presentation = f"Bonjour, je m'appelle {name}."
  else:
    presentation = f"Hello, my name is {name}."
  return presentation
```

The parameter `name`is mandatory, but `french` is optional.

```{python}
hello("Valentine")
```

```{python}
#| error: true
hello(french = False)
```

::: {.callout-note} 
Reminder: if you provide the parameters in the exact same order as they are defined, you donâ€™t have to name them. If you name the parameters you can switch their order. As good practice, put all required parameters first.

```{python}
hello(french = False, name = "Valentine")
```

```{python}
hello("Valentine", False)
```
:::

## Output

If no `return` statement is given, then no output will be returned, but the function will still be run. 

```{python}
def hello(name):
  """Presenting myself."""
  print("We are inside the 'hello()' function.")
  presentation = f"Hello, my name is {name}."
```

```{python}
print(hello("Valentine"))
```

The output can be of any type. If you have a lot of things to return, you might want to return a `list` or a `dict` for example. 

```{python}
def multiple_of_3(list_of_numbers):
  """Returns the number that are multiple of 3."""
  multiples = []
  for num in list_of_numbers:
    if num % 3 == 0:
      multiples.append(num)
  return multiples

multiple_of_3(range(1, 20, 2))
```

::: {.callout-note} 
This could be written as a one-liner.
```{python}
def multiple_of_3(list_of_numbers):
  """Returns the number that are multiple of 3."""
  multiples = [num for num in list_of_numbers if num % 3 == 0]
  return multiples

multiple_of_3(range(1, 20, 2))
```
:::



## Exercise 
::: {.callout-important title="Exercise"} 

Write a function called `nucl_freq` to compute nucleotide frequency of a sequence. 
Given a sequence as input, it outputs a dictionnary with keys being the nucleotides `A`, `T`, `C` and `G`, and values being their frequency in the sequence.  

With the input given below, the output should be:

```{python}
#| eval: false

def ...
  # Your code here

nucl_freq("ATTCCCGGGG")
```


```{python}
#| echo: false
def nucl_freq(seq):
  n = len(seq)
  freq = dict()
  for nucl in {"A", "T", "C", "G"}:
    freq[nucl] = seq.count(nucl)/n
  return freq 

nucl_freq("ATTCCCGGGG")
```



:::
::: {.content-hidden unless-meta="solutions"}

::: {.callout collapse="true" title="Solutions"}

```{python}
def nucl_freq(seq):
  n = len(seq)
  freq = dict()
  for nucl in {"A", "T", "C", "G"}:
    freq[nucl] = seq.count(nucl)/n
  return freq 

nucl_freq("ATTCCCGGGG")
```
::: 
:::

# Scientific packages 

A python package contains a set of function to perform specific tasks. 

A package needs to be **installed** to your computer one time. 

You can install a package with `pip`. It should have been automatically installed with your python, to make sure that you have it you can run:

```{bash}
#| eval: false

# In Linux/MacOS
python -m pip --version
# In Windows
py -m pip --version
```

If it does not work, check out [pip documentation](https://pip.pypa.io/en/stable/getting-started/).

To install a package called pandas, you must run:

```{bash}
#| eval: false

# In Linux/MacOS
python -m pip install pandas
# In Windows
py -m pip install pandas
```

To get more information about `pip`, check out the full [documentation](https://pip.pypa.io/en/stable/getting-started/).

::: {.callout-warning} 
Installing a package is done outside of the python interpreter, in command line in a terminal. 
::: 

When you wish to use a package in a python script, you'll need to import it, by writing inside of you script:

```{python}
import pandas
```

## Pandas

Pandas is a package used to work with data sets, in order to easily clean, manipulate, explore and analyze data.

### Create pandas data

Pandas provides two types of classes for handling data:

- `Series`: a one-dimensional labeled array holding data of any type such as integers or strings. It is like a column in a table.

```{python}
# If nothing else is specified, the values are labeled with their index number (starting from `0`).
myseries = pandas.Series([1, 7, 2], index = ["x", "y", "z"])
print(myseries)
```


- `DataFrame`: a two-dimensional data structure that holds data like a two-dimension array or a table with rows and columns. It is like a table.


```{python}
data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
} 

df = pandas.DataFrame(data)

print(df) 
```

You can also create a DataFrame from a file.
```{python}
# Make sure this is the correct path for you! You are in the directory from where you execute the script.
df = pandas.read_csv('exercise/data/sample.csv')

print(df)
```

You get access to the index and column names with: 

```{python}
df.columns
df.index
```

You can rename index and column names:
```{python}
df = df.rename(index={0: 'a', 1: 'b', 2: 'c', 3: 'd', 4: 'e', 5 : 'f'})

df.index
```

You can select rows:
```{python}
# Select one row by its label
print(df.loc[['a']]) 
# Select one row by its index
print(df.iloc[[0]]) 

# Select several rows by labels
print(df.loc[['a','c']])
# Select one row by index
print(df.iloc[[0,2]]) 
```

You can select columns:
```{python}
# Select one column by label
df['Tissue'] # Series
df[['Tissue']] # DataFrame

# Select several columns
df[['Gene','Expression_Level']]

# Select several columns by index 
df.iloc[:,[0,1]]
```

You can select rows and columns as follows:
```{python}
df.loc[['b'], ['Gene','Expression_Level']]
```

You can filter based on a condition as follows: 
```{python}
df[df['Expression_Level'] > 6]
```

### Useful methods

To explore the data set, use the following methods:
```{python}
df.info()
```

```{python}
df.describe()
```

```{python}
df.head()
```
```{python}
df.sort_values(by="Gene")
```

```{python}
df['Expression_Level'].mean()

df.groupby("Gene")[['Expression_Level']].mean()
```

### Learn More 

To get more information on how to use pandas, check out:

- the [documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html#)
- the [cheat sheet](https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf)
- any [useful tutorial](https://www.w3schools.com/python/pandas/)

### Exercise 

::: {.callout-important title="Exercise"} 

1. Create a pandas DataFrame from the file containing the frequency of each nucleotide per sequences (`exercise/data/example.txt`). 

2. Make sure that `df.index` contains the name of the sequences, and `df.columns` contains the nucleotides. 

3. Use `pandas.melt()` (see the [doc](https://pandas.pydata.org/docs/reference/api/pandas.melt.html)) to get the data in the following format:

```
    nucl  freq
Seq            
seq1    A  0.46
seq2    A  0.20
seq3    A  0.16
seq4    A  0.18
seq5    A  0.26
seq1    T  0.22
seq2    T  0.12
...
```

4. Get the mean value of all nucleotide frequencies.

5. Get the mean value of frequencies per nucleotide.

6. Filter to remove values of seq1. 

7. Recompute the mean value of frequencies per nucleotide.

:::

::: {.content-hidden unless-meta="solutions"}

::: {.callout collapse="true" title="Solutions"}


```{python}
import pandas

# 1. 
df = pandas.read_csv('exercise/data/example.txt', index_col=0, sep=' ')

# 2. 
df.index
df.columns

# 3.
df = pandas.melt(df, var_name='nucl', value_name='freq', ignore_index=False)

# 4.
df['freq'].mean()

# 5.
df.groupby("nucl")[['freq']].mean()

# 6. 
df = df[df.index != "seq1"]

# 7.
df.groupby("nucl")[['freq']].mean()

```

:::

:::
## Matplotlib 

Matplotlib is a package to create visualizations in Python widely used in science.

To shorten the name of the package when we call its functions, we can import it as follows:
```{python}
import matplotlib.pyplot as plt

df = pandas.read_csv('exercise/data/sample.csv')

# The data for GeneA and GeneB is extracted from the DataFrame 'df'
serieA = df[df['Gene'] == 'GeneA']['Expression_Level']
serieB = df[df['Gene'] == 'GeneB']['Expression_Level']

# Create a new figure 
fig = plt.figure()

# Create a boxplot showing the expression levels of GeneA and GeneB
plt.boxplot([serieA, serieB], # List of series
            labels=['GeneA', 'GeneB'])

# Set the label for the x-axis
plt.xlabel('Gene')
# Set the label for the y-axis
plt.ylabel('Expression Level')
# Set the title of the plot
plt.title('Expression of Genes in Different Tissues')
# Display the boxplot
plt.show()
# Save the plot as a PNG file with a resolution of 300 dots per inch (dpi)
# The file will be saved in the specified location 
fig.savefig('exercise/data/my-figure.png', dpi=300)
```

The following code is equivalent. 
```{python}
# Create a new figure 
fig, ax = plt.subplots(1, figsize=(5, 4))

ax.boxplot([serieA, serieB], # List of series
            labels=['GeneA', 'GeneB'])
ax.set_xlabel('Gene')
ax.set_ylabel('Expression Level')
ax.set_title('Expression of Genes in Different Tissues')
ax.legend()
plt.show()

# Save the plot as a PNG file with a resolution of 300 dots per inch (dpi)
# The file will be saved in the specified location 
fig.savefig('exercise/data/my-figure-2.png', dpi=300)
```

::: {.callout-note} 
The first way of plotting is function-oriented, and the second is object-oriented. 
You might encounter both styles of coding. 
:::

![Anatomy of a matplotlib plot](img/matplotlib.png)

Many visualizations are available (static, animated, interactive). For more information, check out: 

- the [documentation](https://matplotlib.org/stable/users/explain/quick_start.html)
- the [cheat sheet](https://matplotlib.org/cheatsheets/)
- any [useful tutorial](https://www.w3schools.com/python/matplotlib_intro.asp)
- some [inspiration](https://matplotlib.org/stable/gallery/index)

## Exercise

::: {.callout-important title="Exercise"} 

Create a script that gets nucleotide frequency data from a file in the format of `exercise/data/example.txt`, and visualizes it using Matplotlib and Pandas. 

Your script should read the data, create a stacked bar chart showing the nucleotide frequencies for each sequence, and label the axes appropriately. 
Here's the expected plot:

```{python}
#| echo: false

import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame from the given data
df = pd.read_csv('exercise/data/example.txt', index_col=0, sep=' ')

# Plot the data
fig, ax = plt.subplots(1, figsize=(5, 6))

bottom = pd.Series([0,0,0,0,0], index = df.index) 
for col in df.columns:
    ax.bar(df.index, df[col], label=col, bottom=bottom)
    bottom += df[col]

# Add labels and legend
ax.set_xlabel('Sequences')
ax.set_ylabel('Frequency')
ax.legend(title='Nucleotides', bbox_to_anchor=(0, 1),
          loc='lower left', ncols=4)

plt.show()
```

:::

::: {.content-hidden unless-meta="solutions"}

::: {.callout collapse="true" title="Solutions"}

```{python}
#| eval: false
import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame from the given data
df = pd.read_csv('exercise/data/example.txt', index_col=0, sep=' ')

# Plot the data
fig, ax = plt.subplots(1, figsize=(5, 6))

bottom = pd.Series([0,0,0,0,0], index = df.index) 
for col in df.columns:
    ax.bar(df.index, df[col], label=col, bottom=bottom)
    bottom += df[col]

# Add labels and legend
ax.set_xlabel('Sequences')
ax.set_ylabel('Frequency')
ax.legend(title='Nucleotides', bbox_to_anchor=(0, 1),
          loc='lower left', ncols=4)
plt.show()
```

or also, 

```{python}
import pandas as pd
import matplotlib.pyplot as plt

# Create a DataFrame from the given data
df = pd.read_csv('exercise/data/example.txt', index_col=0, sep=' ')

# Plot the data
df.plot(kind='bar', stacked=True)
plt.xlabel('Sequences')
plt.ylabel('Frequency')
plt.legend(title='Nucleotides', bbox_to_anchor=(0, 1),
          loc='lower left', ncols=4)

plt.show()
```


:::

:::

## More packages

There are MANY packages available, here's a short list of some that might interest you:


| Package  | Usage | Example of usage |Â 
|-|---|---|
| [BioPython](https://biopython.org/docs/dev/Tutorial/index.html)  |  Computational molecular biology  |Â Sequence handling, access to NCBI databases |Â 
| [NumPy](https://numpy.org/doc/stable/user/absolute_beginners.html) |	Numerical arrays |	Data manipulation, mathematical operations, linear algebra |
| [Seaborn](https://seaborn.pydata.org/tutorial.html) |	High-level interface for drawing plots |	Data visualization, statistical graphics |
| [HTSeq](https://htseq.readthedocs.io/en/latest/index.html) | High throughput sequencing |Â Quality and coverage, counting reads, read alignment |
| [Scanpy](https://scanpy.readthedocs.io/en/stable/) | Single-Cell Analysis | Preprocessing, visualization, clustering |
| [SciPy](https://docs.scipy.org/doc/scipy/tutorial/index.html) |	Mathematical algorithms | Clustering, ODE, Fourier Transforms |
| [Scikit-image](https://scikit-image.org/docs/stable/user_guide/getting_started.html) |	Image processing |	Image enhancement, segmentation, feature extraction |
| [Scikit-learn](https://scikit-learn.org/stable/getting_started.html) |	Machine learning |	Classification, regression, clustering, dimensionality reduction |
| [TensorFlow](https://www.tensorflow.org/tutorials/quickstart/beginner?hl=fr) and [PyTorch](https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html) |	Deep learning |	Neural networks, natural language processing, computer vision |

# Final tips and resources 

::: {.column-margin}
![Please, read the doc](img/readthedocs.jpg){#fig-readthedocs width=100%}
:::

Here are a couple of tips:

- Leave comments (think of your future self!)
- Be consistent (quotes, indents...)
- Don't re-invent the wheel, for common tasks, it's likely that a function already exists
- Read the documentation when using a new package or function!
- Google It! Use the correct programming vocabulary to increase your chances of finding an answer. If you don't find anything, try wording it differently. 
- The easiest way to learn is by example, so follow a tutorial with the example data, and then try to apply it to your own! 

You can follow some free tutorials on:

- [Code Academy](https://www.codecademy.com/catalog/language/python)
- [EdX](https://www.edx.org/learn/python)
- Youtube!
  
Finally, you should able to use Github Copilot (AI coding assistant), as it is free for students: [https://education.github.com/benefits](https://education.github.com/benefits). 

# References {.unnumbered}

A [python conference](https://www.pycon.fr/2024/) organized by the AFPy (Association Francophone Python) is held in Strasbourg in the end of October 2024!  

Here are some references and ressources that inspired this class: 

- [Python doc](https://docs.python.org/3/tutorial/introduction.html)
- [w3schools](https://www.w3schools.com/python/)
- [pythonforbiologists](https://www.pythonforbiologists.org/)
- [justinbois's Bootcamp](https://justinbois.github.io/bootcamp/2020/lessons/l01_welcome.html#.py-files)
